import asyncio
from aiohttp import web
from aiogram import Bot
import logging

logger = logging.getLogger(__name__)

async def handle_notify(request: web.Request) -> web.Response:
    bot = request.app['bot']
    try:
        data = await request.json()
        user_ids = data.get('user_ids')
        url = data.get('url')
        contract_name = data.get('contract_name')

        if not user_ids or not isinstance(user_ids, list) or not url or not contract_name:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–ø—Ä–æ—Å–µ: {data}")
            return web.json_response({'status': 'error', 'message': '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'}, status=400)

        message_text_template = f"üîî –ù–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ {contract_name}!\n<code>{{url}}</code>"

        for user_id in user_ids:
            try:
                await bot.send_message(chat_id=user_id, text=message_text_template.format(url=url))
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                await asyncio.sleep(1)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        return web.json_response({'status': 'success', 'message': '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã'})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /bot/notify: {e}")
        return web.json_response({'status': 'error', 'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}, status=500)

async def start_http_server(bot: Bot, host: str, port: int):
    app = web.Application()
    app['bot'] = bot
    app.router.add_post('/bot/notify', handle_notify)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host, port)
    logger.info(f"–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ –Ω–∞ {host}:{port}")
    await site.start()
    try:
        while True:
            await asyncio.sleep(3600)
    except asyncio.CancelledError:
        logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
        await runner.cleanup()
        logger.info("HTTP —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.") 