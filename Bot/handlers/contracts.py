import asyncio
from aiogram import Router, F, types, Bot
from aiogram.types import Message, CallbackQuery, InputFile, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from utils.states import AddContractState, DeleteContractState
from utils.keyboard import main_menu_keyboard
import db.repository as repository
import services.audit as audit
import services.visualization as visualization
from services.get_contract_name import get_contract_name, ContractVerificationError, NetworkAccessError
import logging

router = Router()

SUPPORTED_NETWORKS = {
    "mainnet": "ETH Mainnet",
    "base": "Base",
    "arbitrum": "Arbitrum"
}

def create_network_keyboard():
    buttons = [
        [types.InlineKeyboardButton(text=name, callback_data=f"net_{net_id}")]
        for net_id, name in SUPPORTED_NETWORKS.items()
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def create_source_keyboard():
    buttons = [
        [types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö", callback_data="select_tracked")],
        [types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç", callback_data="select_other")],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

@router.callback_query(F.data == "add_contract")
async def menu_add_contract(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(action="add")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", reply_markup=create_network_keyboard())
    await state.set_state(AddContractState.selecting_network)
    await callback.answer()

@router.callback_query(F.data == "audit_contract")
async def menu_audit_contract(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(action="audit")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞:", reply_markup=create_source_keyboard())
    await state.set_state(AddContractState.choosing_source)
    await callback.answer()

@router.callback_query(F.data == "visualize_contract")
async def menu_visualize_contract(callback: types.CallbackQuery, state: FSMContext):
    await state.update_data(action="visualize")
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:", reply_markup=create_source_keyboard())
    await state.set_state(AddContractState.choosing_source)
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ --- #
@router.callback_query(AddContractState.choosing_source, F.data == "select_tracked")
async def process_source_tracked(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.from_user.id)
    contracts = await repository.get_user_contracts(user_id)

    if not contracts:
        await callback.message.edit_text("üìÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç.")
        await state.clear()
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        await callback.answer()
        return

    response = "üìÑ –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:\n\n"
    contract_dict = {}
    for i, (network, address, contract_name) in enumerate(contracts, 1):
        network_name = SUPPORTED_NETWORKS.get(network, network)
        name_display = f" ({contract_name})" if contract_name and contract_name != "noname" else ""
        response += f"{i}. üåê –°–µ—Ç—å: {network_name}\n"
        response += f"   üè∑Ô∏è –ò–º—è:{name_display}\n"
        response += f"   <code>{address}</code>\n\n"
        contract_dict[str(i)] = {"network": network, "address": address, "name": contract_name}

    response += "\nüî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])

    await callback.message.edit_text(response, reply_markup=kb, parse_mode="HTML")
    await state.update_data(tracked_contracts=contract_dict)
    await state.set_state(AddContractState.selecting_tracked)
    await callback.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–≤–æ–¥–∞ "–¥—Ä—É–≥–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞" --- #
@router.callback_query(AddContractState.choosing_source, F.data == "select_other")
async def process_source_other(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å:", reply_markup=create_network_keyboard())
    await state.set_state(AddContractState.selecting_network)
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ --- #
@router.message(AddContractState.selecting_tracked)
async def process_tracked_contract_selection(message: types.Message, state: FSMContext):
    user_input = message.text.strip()
    data = await state.get_data()
    tracked_contracts = data.get('tracked_contracts', {})
    action = data.get("action")

    selected_contract = None
    if user_input.isdigit() and user_input in tracked_contracts:
        selected_contract = tracked_contracts[user_input]
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.",
            reply_markup=kb
        )
        return

    if selected_contract:
        addr = selected_contract['address']
        network = selected_contract['network']
        contract_name = selected_contract.get('name')

        await state.update_data(addr=addr, network=network, contract_name=contract_name)

        confirmation_text = f"–í—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å: <b>{SUPPORTED_NETWORKS.get(network, network)}</b>\n"
        confirmation_text += f"–í—ã–±—Ä–∞–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–π –∞–¥—Ä–µ—Å: <code>{addr}</code>\n"

        if contract_name == "noname" or not contract_name:
            confirmation_text += "–ò–º—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ <b>–Ω–µ –∑–∞–¥–∞–Ω–æ</b>\n"
        else:
            confirmation_text += f"–ò–º—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: <b>{contract_name}</b>\n"

        if action == "audit":
            confirm_button_text = "‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
        elif action == "visualize":
            confirm_button_text = "‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç"
        else:
            confirm_button_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä"

        confirmation_text += f"\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."

        kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=confirm_button_text, callback_data="confirm_addr")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        await message.answer(confirmation_text, reply_markup=kb, parse_mode="HTML")
        await state.set_state(AddContractState.confirming)

    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.",
            reply_markup=kb
        )


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ --- #
@router.callback_query(AddContractState.selecting_network, F.data.startswith("net_"))
async def process_network_selection(callback: types.CallbackQuery, state: FSMContext):
    network_id = callback.data.split("_")[1]
    if network_id not in SUPPORTED_NETWORKS:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å–µ—Ç—å", show_alert=True)
        return
    await state.update_data(network=network_id)
    await callback.message.edit_reply_markup(None)
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å: {SUPPORTED_NETWORKS[network_id]}.\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:")
    await state.set_state(AddContractState.entering_address)
    await callback.answer()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ ---
@router.message(AddContractState.entering_address)
async def process_address(message: types.Message, state: FSMContext):
    addr = message.text.strip()
    data = await state.get_data()
    network = data.get("network")
    action = data.get("action")

    cancel_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])

    try:
        await message.answer("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞...")
        contract_name = await get_contract_name(addr, network)
        if contract_name is None:
            network_name = SUPPORTED_NETWORKS.get(network, network)
            await message.answer(
                f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç <code>{addr}</code> –≤ —Å–µ—Ç–∏ {network_name}.\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.",
                parse_mode="HTML",
                reply_markup=cancel_kb
            )
            return
        await state.update_data(addr=addr, contract_name=contract_name)

        confirmation_text = f"–í—ã–±—Ä–∞–Ω–∞ —Å–µ—Ç—å: <b>{SUPPORTED_NETWORKS.get(network, network)}</b>\n"
        confirmation_text += f"–í–≤–µ–¥–µ–Ω –∞–¥—Ä–µ—Å: <code>{addr}</code>\n"

        if contract_name == "noname":
            confirmation_text += "–ö–æ–Ω—Ç—Ä–∞–∫—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –∏–º—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ <b>–Ω–µ –∑–∞–¥–∞–Ω–æ</b>\n"
        else:
            confirmation_text += f"–ò–º—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: <b>{contract_name}</b>\n"

        if action == "add":
            confirm_button_text = "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ"
        elif action == "audit":
            confirm_button_text = "‚úÖ –ü—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞"
        elif action == "visualize":
            confirm_button_text = "‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç"
        else:
            confirm_button_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"

        confirmation_text += f"\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."

        confirm_kb = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text=confirm_button_text, callback_data="confirm_addr")],
            [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        await message.answer(confirmation_text, reply_markup=confirm_kb, parse_mode="HTML")
        await state.set_state(AddContractState.confirming)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
    except ContractVerificationError as e:
        network_name = SUPPORTED_NETWORKS.get(network, network)
        await message.answer(
            f"‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç <code>{addr}</code> –≤ —Å–µ—Ç–∏ {network_name} –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:\n"
            f"<i>{e}</i>\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.",
            parse_mode="HTML",
            reply_markup=cancel_kb
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏
    except NetworkAccessError as e:
        logging.warning(f"Network access error for {addr} on {network}: {e}")
        network_name = SUPPORTED_NETWORKS.get(network, network)
        await message.answer(
            f"üîå –í–æ–∑–Ω–∏–∫–ª–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Å–µ—Ä–≤–∏—Å—É —Å–µ—Ç–∏ {network_name} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞ <code>{addr}</code>.\n"
            f"–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

    # –î—Ä—É–≥–∏–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏
    except Exception as e:
        logging.error(f"Error getting contract name for {addr} on {network}: {e}")
        network_name = SUPPORTED_NETWORKS.get(network, network)
        await message.answer(
            f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ <code>{addr}</code> –≤ —Å–µ—Ç–∏ {network_name} –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é.",
            parse_mode="HTML",
            reply_markup=cancel_kb
        )
        return


# --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ --- #
@router.callback_query(AddContractState.confirming, F.data == "confirm_addr")
async def confirm_address(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    addr = data.get("addr")
    action = data.get("action")
    network = data.get("network")
    contract_name = data.get("contract_name")
    await callback.message.edit_reply_markup(None)
    user_id = int(callback.from_user.id)

    display_name = f" '{contract_name}'" if contract_name and contract_name != "noname" else ""
    network_name = SUPPORTED_NETWORKS.get(network, network)

    if action == "add":
        saved = await repository.save_contract(user_id, network, addr, contract_name)
        if saved:
            await callback.message.answer(f"üíæ –ö–æ–Ω—Ç—Ä–∞–∫—Ç{display_name} <code>{addr}</code> –≤ —Å–µ—Ç–∏ {network_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω.", parse_mode="HTML")
        else:
            await callback.message.answer(f"‚ö†Ô∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç <code>{addr}</code> –≤ —Å–µ—Ç–∏ {network_name} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.", parse_mode="HTML")

    elif action == "audit":
        await callback.message.answer(f"üîé –ó–∞–ø—É—Å–∫–∞—é –∞—É–¥–∏—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞{display_name} <code>{addr}</code> –≤ —Å–µ—Ç–∏ {network_name}, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", parse_mode="HTML")
        try:
            pdf = await audit.audit_contract(addr, network)
            await callback.message.answer(f"‚úÖ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω:")
            pdf_input_file = BufferedInputFile(file=pdf, filename=f"audit_report_{addr}.pdf")
            await callback.message.answer_document(document=pdf_input_file)
        except Exception as e:
            logging.error(f"Audit failed for {addr} on {network}: {e}")
            await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –∞—É–¥–∏—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞{display_name} <code>{addr}</code>.", parse_mode="HTML")

    elif action == "visualize":
        await callback.message.answer(f"‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞{display_name} <code>{addr}</code> –≤ —Å–µ—Ç–∏ {network_name}...", parse_mode="HTML")
        try:
            graph_url = await visualization.get_contract_graph_url(addr, network)
            await callback.message.answer(f"""‚úÖ –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!

–ì—Ä–∞—Ñ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ:
<code>{graph_url}</code>""", parse_mode="HTML")
        except ConnectionError as e:
            logging.warning(f"Visualization connection failed for {addr} on {network}: {e}")
            await callback.message.answer(f"üîå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞{display_name} <code>{addr}</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
        except TimeoutError as e:
            logging.warning(f"Visualization timeout for {addr} on {network}: {e}")
            await callback.message.answer(f"‚è≥ –°–µ—Ä–≤–∏—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞{display_name} <code>{addr}</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
        except ValueError as e:
            logging.error(f"Visualization data error for {addr} on {network}: {e}")
            await callback.message.answer(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞{display_name} <code>{addr}</code>.", parse_mode="HTML")
        except Exception as e:
            logging.error(f"Visualization failed for {addr} on {network}: {e}")
            await callback.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞{display_name} <code>{addr}</code> –∏–∑-–∑–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–π –æ—à–∏–±–∫–∏.", parse_mode="HTML")

    await state.clear()
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await callback.answer()

# --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π AddContractState ---
@router.callback_query(StateFilter(AddContractState), F.data == "cancel_action")
async def cancel_add_contract_steps(callback: types.CallbackQuery, state: FSMContext):
    try:
        await callback.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception:
        await callback.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

    await state.clear()
    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await callback.answer()


# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ --- #
@router.callback_query(F.data == "view_contracts")
async def view_tracked_contracts(callback: types.CallbackQuery):
    user_id = int(callback.from_user.id)

    # {network, address, contract_name}[]
    contracts = await repository.get_user_contracts(user_id)

    if not contracts:
        await callback.message.answer("üìÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤.")
    else:
        response = "üìÑ –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:\n\n"
        for i, (network, address, contract_name) in enumerate(contracts, 1):
            network_name = SUPPORTED_NETWORKS.get(network, network)
            name_display = f" ({contract_name})" if contract_name and contract_name != "noname" else ""
            response += f"{i}. üåê –°–µ—Ç—å: {network_name}\n"
            response += f"   üè∑Ô∏è –ò–º—è:{name_display}\n"
            response += f"   <code>{address}</code>\n\n"
        await callback.message.answer(response, parse_mode="HTML")

    await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (1 —ç—Ç–∞–ø) --- #
@router.callback_query(F.data == "delete_contract_start")
async def delete_contract_start(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.from_user.id)

    contracts = await repository.get_user_contracts(user_id)

    if not contracts:
        await callback.message.answer("üóëÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
        await callback.answer()
        return

    response = "üìÑ –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã:\n\n"
    contract_dict = {}
    for i, (network, address, contract_name) in enumerate(contracts, 1):
        network_name = SUPPORTED_NETWORKS.get(network, network)
        name_display = f" ({contract_name})" if contract_name and contract_name != "noname" else ""
        response += f"{i}. üåê –°–µ—Ç—å: {network_name}\n"
        response += f"   üè∑Ô∏è –ò–º—è:{name_display}\n"
        response += f"   <code>{address}</code>\n\n"
        contract_dict[str(i)] = {"network": network, "address": address, "name": contract_name}

    response += "\nüî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
    ])

    await callback.message.answer(response, reply_markup=kb, parse_mode="HTML")
    await state.update_data(contracts_for_delete=contract_dict)
    await state.set_state(DeleteContractState.entering_address)
    await callback.answer()


# --- –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (2 —ç—Ç–∞–ø) --- #
@router.message(DeleteContractState.entering_address)
async def process_delete_address(message: types.Message, state: FSMContext):
    user_input = message.text.strip()
    user_id = int(message.from_user.id)
    data = await state.get_data()
    contracts_for_delete = data.get('contracts_for_delete', {})

    network_to_delete = None
    address_to_delete = None
    name_to_delete = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–º–µ—Ä –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    if user_input.isdigit() and user_input in contracts_for_delete:
        contract_info = contracts_for_delete[user_input]
        network_to_delete = contract_info['network']
        address_to_delete = contract_info['address']
        name_to_delete = contract_info.get('name')
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_action")]
        ])
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ.",
            reply_markup=kb
        )
        return

    if network_to_delete and address_to_delete:
        deleted = await repository.delete_contract(user_id, network_to_delete, address_to_delete)
        if deleted:
            network_name = SUPPORTED_NETWORKS.get(network_to_delete, network_to_delete)
            display_name = f" '{name_to_delete}'" if name_to_delete and name_to_delete != "noname" else ""
            await message.answer(f"üóëÔ∏è –ö–æ–Ω—Ç—Ä–∞–∫—Ç{display_name} <code>{address_to_delete}</code> –≤ —Å–µ—Ç–∏ {network_name} —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.", parse_mode="HTML")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.")

        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    else:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        await message.answer("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
